var isTesting,publicAddress,is_testing_wallet_address=!1,ajaxurl=mo_web3_utility_object.ajax_url,wp_nonce=mo_web3_utility_object.wp_nonce,connectButton=document.getElementById("perawallet-connect");let userLoginData={state:"loggedOut",ethAddress:"",buttonText:"Log in",publicName:"",config:{headers:{"Content-Type":"application/x-www-form-urlencoded"}}};async function connectToMyAlgo(e=0){let t=new MyAlgoConnect;try{let n=await t.connect({shouldSelectOneAccount:!1,openManager:!1}),s=n.map(e=>e.address),o=s[0],r=o;jQuery.post(ajaxurl,{action:"type_of_request",request:"login",address:r,mo_web3_verify_nonce:wp_nonce},async function(n){if("Error"!==n.substring(0,5))try{var s,o;let a=await t.signBytes(n,r);s=a,o=r,jQuery.ajaxSettings.traditional=!0,jQuery.post(ajaxurl,{action:"type_of_request",address:o,request:"auth_algorand",signature:s,mo_web3_verify_nonce:wp_nonce},async function(t){if(t.isSignatureVerified){if(e)openModal(o);else{let n=r;is_testing_wallet_address&&(n=is_testing_wallet_address);let a={address:r,nonce:t.nonce,signature:s,walletsBlockchain:"algorand"};post_to_url("",a,"post","mo_web3_hiddenform_nonce")}}else alert("User could not be authenticated!")})}catch(i){alert(i);return}})}catch(a){return}}const getPhantomProvider=()=>{let e=window,t=e.phantom?.solana;if(t?.isPhantom)return t};async function getAccount(e=0){let t=window.solana&&window.solana.isPhantom,n;if(!0==t){let s=getPhantomProvider(),o=await s.connect();var r={action:"type_of_request",request:"login",address:n=o.publicKey.toString(),mo_web3_verify_nonce:wp_nonce};jQuery.post(ajaxurl,r,async function(t){if("Error"!==t.substring(0,5)){let n=new TextEncoder().encode(t);try{var o,r,a;let{publicKey:i,signature:l}=await s.signMessage(n);o=l,r=i,a={action:"type_of_request",address:JSON.stringify(r),request:"auth_phantom",signature:JSON.stringify(o),mo_web3_verify_nonce:wp_nonce},jQuery.post(ajaxurl,a,async function(t){if(t.isSignatureVerified){if(e)openModal(r);else{let n=r;is_testing_wallet_address&&(n=is_testing_wallet_address);post_to_url("",{address:JSON.stringify(r),nonce:t.nonce,signature:JSON.stringify(o),walletsBlockchain:"solana"},"post","mo_web3_hiddenform_nonce")}}else alert("user could not be authenticated")})}catch(c){alert(c),console.error(c);return}}})}else window.alert("Use phantom mobile app's inbuilt browser")}function disconnectAccount(){window.solana.disconnect(),window.solana.on("disconnect",()=>console.log("disconnected!"))}function checkMetamask(){if(window.ethereum){let e=document.getElementById("buttonText");return e.style.cursor="not-allowed",e.disabled=!0,showMessage("<strong>Error:</strong> To login, first install a Web3 wallet like the Metamask browser extension or mobile app"),1}return 0}const ethEnabled=async()=>{if(window.ethereum){try{await window.ethereum.request({method:"eth_requestAccounts"}),window.web3=new Web3(window.ethereum),ethInit()}catch(e){return showMessage(e.message,"msg"),console.log("Error: ",e),!1}return!0}};function ethInit(){ethereum.on("accountsChanged",t=>e());async function e(){try{let e=(await window.ethereum.request({method:"eth_requestAccounts"}))[0];e=e.toLowerCase()}catch(t){console.log(t)}}}async function userLoginOut(e=0,t=null,n=!1,s=null){"metamask"==t?await connectWithMetaMask():"walletConnect"==t?await connectWithWalletConnect():"coinbase"==t&&await connectWithCoinBase();let o="";if(isTesting=e,(o=await onConnectLoadWeb3Modal()).err){o.err.message?showMessage(o.err.message):showMessage(o.err);return}if(web3ModalProv){window.web3=web3ModalProv;try{userLogin(s)}catch(r){return}}}async function userLogin(e){let t;try{t=await web3.eth.getAccounts()}catch(n){console.error("error ",n.message)}let s=t[0];if(null==(s=s.toLowerCase())){showMessage("<strong>Error:</strong> No wallet address found");return}var o={action:"type_of_request",request:"login",address:s,mo_web3_verify_nonce:wp_nonce};jQuery.post(ajaxurl,o,function(t){var n,o;"Error"!=t.substring(0,5)?(n=t,o=publicAddress=s,new Promise((e,t)=>{showMessage("Waiting for your signature","msg"),web3.eth.personal.sign(web3.utils.utf8ToHex(n),o,(n,s)=>n?(console.log("",n),t({msg:n.message})):e({publicAddress:o,signature:s}))})).then(function t({publicAddress:n,signature:s}){jQuery.post(ajaxurl,{action:"type_of_request",address:n,request:"auth",signature:s,mo_web3_verify_nonce:wp_nonce},async function(t){if(t.isSignatureVerified){if(isTesting)openModal(n);else{let o=n;is_testing_wallet_address&&(o=is_testing_wallet_address);let r={address:n,nonce:t.nonce,signature:s,walletsBlockchain:"evm"};e&&(r.redirectionUrl=e),post_to_url("",r,"post","mo_web3_hiddenform_nonce")}}})}).catch(e=>{console.log("error",e),showMessage("<strong>Error:</strong> "+e.msg)}):console.log("Error: "+t)})}function openModal(e){document.getElementById("wallet_address").innerText=e,document.getElementById("moweb3_test_modal").style.display="block",jQuery("body").append(jQuery("#moweb3_test_modal")),document.getElementById("moweb3_display_modal").click()}function post_to_url(e,t,n,s){n=n||"post",e=ajaxurl;var o=document.createElement("form");for(var r in o.setAttribute("method",n),o.setAttribute("action",e),t)if(t.hasOwnProperty(r)){var a=document.createElement("input");a.setAttribute("type","hidden"),a.setAttribute("name",r),a.setAttribute("value",t[r]),o.appendChild(a)}var a=document.createElement("input");a.setAttribute("type","hidden"),a.setAttribute("name",s),a.setAttribute("value",wp_nonce),o.appendChild(a),document.body.appendChild(o),o.submit()}function showMessage(e,t="error"){let n;(n=document.getElementById("moweb3CustomErrorMessage")).innerHTML=e}function clearMessage(){let e;(e=document.getElementById("moweb3CustomErrorMessage")).innerHTML="",jQuery("body").append(jQuery("#multipleCryptowalletModal"))}